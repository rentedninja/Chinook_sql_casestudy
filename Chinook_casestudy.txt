/***
--> Digital Music Store - Data Analysis
Data Analysis project to help Chinook Digital Music Store to help how they can
optimize their business opportunities and to help answering business related questions.
***/


Main repository: https://github.com/lerocha/chinook-database
Download files: https://github.com/lerocha/chinook-database/tree/master/ChinookDatabase/DataSources

select * from Album; -- 347
select * from Artist; -- 275
select * from Customer; -- 59
select * from Employee; -- 8
select * from Genre; -- 25
select * from Invoice; -- 412
select * from InvoiceLine; -- 2240
select * from MediaType; -- 5
select * from Playlist; -- 18
select * from PlaylistTrack; -- 8715
select * from Track; -- 3503


-- Using SQL solve the following problems using the chinook database.
1) Find the artist who has contributed with the maximum no of albums. Display the artist name and the no of albums.

with temp as
    (select alb.artistid
    , count(1) as no_of_albums
    , rank() over(order by count(1) desc) as rnk
    from Album alb
    group by alb.artistid)
select art.name as artist_name, t.no_of_albums
from temp t
join artist art on art.artistid = t.artistid
where rnk = 1;




2) Display the name, email id, country of all listeners who love Jazz, Rock and Pop music.

select  (c.firstname||' '||c.lastname) as customer_name
, c.email, c.country, g.name as genre
from InvoiceLine il
join track t on t.trackid = il.trackid
join genre g on g.genreid = t.genreid
join Invoice i on i.invoiceid = il.invoiceid
join customer c on c.customerid = i.customerid
where g.name in ('Jazz', 'Rock', 'Pop');




3) Find the employee who has supported the most no of customers. Display the employee name and designation
select employee_name, title as designation
from (
    select (e.firstname||' '||e.lastname) as employee_name, e.title
    , count(1) as no_of_customers
    , rank() over(order by count(1) desc) as rnk
    from Customer c
    join employee e on e.employeeid=c.supportrepid
    group by e.firstname,e.lastname, e.title) x
where x.rnk=1;




4) Which city corresponds to the best customers?
with temp as
    (select city, sum(total) total_purchase_amt
    , rank() over(order by sum(total) desc) as rnk
    from Invoice i
    join Customer c on c.Customerid = i.Customerid
    group by city)
select city
from temp
where rnk=1;




5) The highest number of invoices belongs to which country?
select country
from (
    select billingcountry as country, count(1) as no_of_invoice
    , rank() over(order by count(1) desc) as rnk
    from Invoice
    group by billingcountry) x
where x.rnk=1;




6) Name the best customer (customer who spent the most money).
select (c.firstname||' '||c.lastname) as customer_name
from (
    select customerid, sum(total) total_purchase
    , rank() over(order by sum(total) desc) as rnk
    from Invoice
    group by customerid) x
join customer c on c.customerid = x.customerid
where rnk=1;




7) Suppose you want to host a rock concert in a city and want to know which location should host it.
-- Query the dataset to find the city with the most rock-music listeners to answer this question.
select I.billingcity, count(1)
from Track T
join Genre G on G.genreid = T.genreid
join InvoiceLine IL on IL.trackid = T.trackid
join Invoice I on I.invoiceid = IL.invoiceid
where G.name = 'Rock'
group by I.billingcity
order by 2 desc;




8) Identify all the albums who have less then 5 track under them.
    Display the album name, artist name and the no of tracks in the respective album.

Solution 1:
with temp as
    (select t.albumid, count(1) as no_of_tracks
    from Track t
    group by t.albumid
    having count(1) < 5
    order by 2 desc)
select al.title as album_title, art.name as artist_name, t.no_of_tracks
from temp t
join album al on t.albumid = al.albumid
join artist art on art.artistid = al.artistid
order by t.no_of_tracks desc;

Solution 2:
select al.title as album_name, art.name as artist_name, count(1) as no_of_tracks
from album al
join track t on t.albumid = al.albumid
join artist art on art.artistid = al.artistid
group by al.title, art.name
having count(1) < 5





9) Display the track, album, artist and the genre for all tracks which are not purchased.
select t.name as track_name, al.title as album_title, art.name as artist_name, g.name as genre
from Track t
join album al on al.albumid=t.albumid
join artist art on art.artistid = al.artistid
join genre g on g.genreid = t.genreid
where not exists (select 1
                 from InvoiceLine il
                 where il.trackid = t.trackid);




10) Find artist who have performed in multiple genres. Diplay the aritst name and the genre.
with temp as
        (select distinct art.name as artist_name, g.name as genre
        from Track t
        join album al on al.albumid=t.albumid
        join artist art on art.artistid = al.artistid
        join genre g on g.genreid = t.genreid
        order by 1,2),
    final_artist as
        (select artist_name
        from temp t
        group by artist_name
        having count(1) > 1)
select t.*
from temp t
join final_artist fa on fa.artist_name = t.artist_name
order by 1,2;




11) Which is the most popular and least popular genre?
Popularity is defined based on how many times it has been purchased.

-- Solution 1 (correct)
with temp as
        (select distinct g.name
        , count(1) as no_of_purchases
        , rank() over(order by count(1) desc) as rnk
        from InvoiceLine il
        join track t on t.trackid = il.trackid
        join genre g on g.genreid = t.genreid
        group by g.name
        order by 2 desc),
    temp2 as
        (select max(rnk) as max_rnk from temp)
select name as genre
, case when rnk = 1 then 'Most Popular' else 'Least Popular' end as popular
from temp
cross join temp2
where rnk = 1 or rnk = max_rnk;

-- Solution using INNER join
with temp as
        (select g.name as genre, count(1) as no_of_songs
        , rank() over(order by count(1) desc) as rnk
        from InvoiceLine il
        join track t on t.trackid = il.trackid
        join genre g on g.genreid = t.genreid
        group by g.name
        order by 2 desc),
    max_rank as
        (select max(rnk) as max_rnk from temp)
select genre, no_of_songs
, case when rnk = 1 then 'Most Popular' else 'Least Popular' end as Popular_Flag
from temp
inner join max_rank on rnk = max_rnk or rnk = 1;




12) Identify if there are tracks more expensive than others. If there are then
    display the track name along with the album title and artist name for these expensive tracks.

select t.name as track_name, al.title as album_name, art.name as artist_name
from Track t
join album al on al.albumid = t.albumid
join artist art on art.artistid = al.artistid
where unitprice > (select min(unitprice) from Track)




13) Identify the 5 most popular artist for the most popular genre.
    Popularity is defined based on how many songs an artist has performed in for the particular genre.
    Display the artist name along with the no of songs.
    [Reason: Now that we know that our customers love rock music, we can decide which musicians to invite to play at the concert.
    Lets invite the artists who have written the most rock music in our dataset.]

    with most_popular_genre as
            (select name as genre
            from (select g.name
                , count(1) as no_of_purchases
                , rank() over(order by count(1) desc) as rnk
                from InvoiceLine il
                join track t on t.trackid = il.trackid
                join genre g on g.genreid = t.genreid
                group by g.name
                order by 2 desc) x
            where rnk = 1),
        all_data as
            (select art.name as artist_name, count(1) as no_of_songs
            , rank() over(order by count(1) desc) as rnk
            from track t
            join album al on al.albumid = t.albumid
            join artist art on art.artistid = al.artistid
            join genre g on g.genreid = t.genreid
            where g.name in (select genre from most_popular_genre)
            group by art.name
            order by 2 desc)
    select artist_name, no_of_songs
    from all_data
    where rnk <= 5;




14) Find the artist who has contributed with the maximum no of songs/tracks. Display the artist name and the no of songs.

select name from (
    select ar.name,count(1)
    ,rank() over(order by count(1) desc) as rnk
    from Track t
    join album a on a.albumid = t.albumid
    join artist ar on ar.artistid = a.artistid
    group by ar.name
    order by 2 desc) x
where rnk = 1;




15) Are there any albums owned by multiple artist?
     
select albumid, count(1) 
from Album 
group by albumid 
having count(1) > 1;




16) Is there any invoice which is issued to a non existing customer?

select * from Invoice I
where not exists (select 1 from customer c 
                where c.customerid = I.customerid);




17) Is there any invoice line for a non existing invoice?

select * from InvoiceLine IL
where not exists (select 1 from Invoice I where I.invoiceid = IL.invoiceid);




18) Are there albums without a title?

select count(*) from Album -- result is 0 which means there are no albums without a title.
where title is null;




19) Are there invalid tracks in the playlist?

select * from PlaylistTrack pt -- result is 0 which means that all tracks in the playlist do exist hence all are valid
where not exists (select 1 from Track t 
                 where t.trackid = pt.trackid)


